---
prepare-task-with-secrets-params: &prepare-task-with-secrets-params
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: platform-automation-tasks
    vars: config
  output_mapping:
    tasks: platform-automation-tasks
  params:
    CONFIG_PATHS: config/config config/foundations/((env))/templates config/foundations/((env))/env config/foundations/((env))/versions vars/foundations/((env))/secrets
    VARS_PATHS: vars/foundations/((env))/defaults vars/foundations/((env))/vars vars/foundations/((env))/secrets vars/foundations/common

email-params: &email-params
  params:
    subject_text: "Concourse Job: ${BUILD_JOB_NAME} Failed"
    body_text: |
      The following Job: ${BUILD_JOB_NAME} has failed in Concourse for:
      Pipeline: ${BUILD_PIPELINE_NAME}
      Build Name: ${BUILD_NAME}
      Build ID: ${BUILD_ID}
      Please view for more information here: ${ATC_EXTERNAL_URL}/teams/${BUILD_TEAM_NAME}/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}

# https://docs.pivotal.io/platform-automation/v4.3/tasks.html#create-vm
resource_types:
  - name: pivnet
    type: docker-image
    source:
      repository: pivotalcf/pivnet-resource
      tag: latest-final
  - name: email
    type: docker-image
    source:
      repository: pcfseceng/email-resource
resources:
  - name: platform-automation
    type: pivnet
    source:
      product_slug: platform-automation
      api_token: ((pivnet-refresh-token))
  - name: config
    type: git
    source:
      uri: git@doe-git.blackrock.com:DOE/chapters/devops-engineering/concourse-tkgi.git
      private_key: ((concourse-ci.private_key))
      branch: develop
  - name: state
    type: git
    source:
      uri: git@doe-git.blackrock.com:DOE/chapters/devops-engineering/concourse-tkgi-opsman-state.git
      private_key: ((concourse-state-ci.private_key))
      branch: develop
  - name: om-installation
    type: git
    source:
      uri: git@doe-git.blackrock.com:DOE/chapters/devops-engineering/concourse-tkgi-opsman-state.git
      private_key: ((concourse-state-ci.private_key))
      branch: develop
  - name: daily-trigger
    type: time
    source:
      start: 12:00 AM
      stop: 1:00 AM
      location: America/New_York
  - name: blackrock-tools-image
    type: docker-image
    source:
      repository: doe-git.blackrock.com:4567/doe/chapters/devops-engineering/pks-ci
      tag: 4.10.0-alpine-3.13
  - name: send-an-email
    type: email
    source:
      smtp:
        host: mailhub.global.blackrock.com
        port: "25"
        anonymous: true
      from: concourse-ci@blackrock.com
      to: [ "GroupProdOpsKubernetesSupport@blackrock.com","vijeth.shetty@blackrock.com" ]
jobs:
  - name: export-ops-manager-installation
    serial: true
    plan:
      - get: daily-trigger
        trigger: true
      - get: platform-automation-image
        resource: platform-automation
        params:
          globs: ["*image*.tgz"]
          unpack: true
      - get: platform-automation-tasks
        resource: platform-automation
        params:
          globs: ["*tasks*.zip"]
          unpack: true
      - get: config
      - get: state
    
      - task: prepare-tasks-with-secrets
        <<: *prepare-task-with-secrets-params
    
      - task: export-installation
        image: platform-automation-image
        file: platform-automation-tasks/tasks/export-installation.yml
        input_mapping:
          env: config
        params:
          ENV_FILE: foundations/((env))/env/env.yml
          INSTALLATION_FILE: installation.zip
    
      - task: make-commit
        image: platform-automation-image
        file: platform-automation-tasks/tasks/make-git-commit.yml
        input_mapping:
          repository: state
          file-source: installation
        output_mapping:
          repository-commit: config-commit
        params:
          # installation file refers to current installation for backup
          FILE_SOURCE_PATH: installation.zip
          FILE_DESTINATION_PATH: ((env))/installation.zip
          GIT_AUTHOR_EMAIL: "tkgi-concourse-bot@example.com"
          GIT_AUTHOR_NAME: "Platform Automation TKGI Concourse Bot"
          COMMIT_MESSAGE: 'feat: backup ops man'
    
      - put: state
        params:
          repository: config-commit
          merge: true
  
  - name: upgrade-ops-manager
    serial: true
    plan:
      - get: platform-automation-image
        resource: platform-automation
        params:
          globs: ["*image*.tgz"]
          unpack: true
      - get: platform-automation-tasks
        resource: platform-automation
        params:
          globs: ["*tasks*.zip"]
          unpack: true
      - get: config
      - get: state
        passed: ["export-ops-manager-installation"]
    
      - task: prepare-tasks-with-secrets
        <<: *prepare-task-with-secrets-params
    
      - task: download-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/download-product.yml
        params:
          CONFIG_FILE: foundations/((env))/versions/download-ops-manager.yml
    
      - task: upgrade-opsman
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upgrade-opsman.yml
        input_mapping:
          image: downloaded-product
          env: config
          installation: state
          vars: config
        params:
          ENV_FILE: foundations/((env))/env/env.yml
          OPSMAN_CONFIG_FILE: config/opsman.yml
          STATE_FILE: ((env))/state.yml
          INSTALLATION_FILE: ((env))/installation.zip
          VARS_FILES: |
            vars/foundations/common/global-vars.yml
            vars/foundations/((env))/vars/vars.yml
        ensure: &put-state
          do:
            - task: make-commit
              image: platform-automation-image
              file: platform-automation-tasks/tasks/make-git-commit.yml
              input_mapping:
                repository: state
                file-source: generated-state
              output_mapping:
                repository-commit: config-commit
              params:
                FILE_SOURCE_PATH: state.yml
                FILE_DESTINATION_PATH: ((env))/state.yml
                GIT_AUTHOR_EMAIL: "tkgi-concourse-bot@example.com"
                GIT_AUTHOR_NAME: "Platform Automation TKGI Concourse Bot"
                COMMIT_MESSAGE: 'feat: update state file'
            - put: state
              params:
                repository: config-commit
                merge: true
    
      - task: configure-director
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-director.yml
        input_mapping:
          env: config
          vars: config
        params:
          VARS_FILES: |
            vars/foundations/common/global-vars.yml
            vars/foundations/((env))/vars/vars.yml
          ENV_FILE: foundations/((env))/env/env.yml
          DIRECTOR_CONFIG_FILE: config/director.yml
    
      - task: apply-director-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-director-changes.yml
        input_mapping:
          env: config
        params:
          ENV_FILE: foundations/((env))/env/env.yml
  
  - name: reconfigure-ops-manager
    serial: true
    plan:
      - get: platform-automation-image
        resource: platform-automation
        params:
          globs: ["*image*.tgz"]
          unpack: true
      - get: platform-automation-tasks
        resource: platform-automation
        params:
          globs: ["*tasks*.zip"]
          unpack: true
      - get: config
    
      - task: prepare-tasks-with-secrets
        <<: *prepare-task-with-secrets-params
    
      - task: configure-opsman
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-opsman.yml
        input_mapping:
          vars: config
          env: config
          config: config
        params:
          VARS_FILES: |
            vars/foundations/common/global-vars.yml
            vars/foundations/((env))/vars/vars.yml
          ENV_FILE: foundations/((env))/env/env.yml
          OPSMAN_CONFIG_FILE: config/opsman.yml
  
  - name: install-ops-manager
    serial: true
    plan:
      - get: platform-automation-image
        resource: platform-automation
        params:
          globs: ["*image*.tgz"]
          unpack: true
      - get: platform-automation-tasks
        resource: platform-automation
        params:
          globs: ["*tasks*.zip"]
          unpack: true
      - get: config
      - get: state
    
      - task: prepare-tasks-with-secrets
        <<: *prepare-task-with-secrets-params
    
      - task: download-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/download-product.yml
        params:
          CONFIG_FILE: foundations/((env))/versions/download-ops-manager.yml
    
      - task: create-vm
        image: platform-automation-image
        file: platform-automation-tasks/tasks/create-vm.yml
        params:
          OPSMAN_CONFIG_FILE: config/opsman.yml
          VARS_FILES: |
            vars/foundations/common/global-vars.yml
            vars/foundations/((env))/vars/vars.yml
        input_mapping:
          vars: config
          image: downloaded-product
        ensure: *put-state
    
      - task: configure-ldap-authentication
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-ldap-authentication.yml
        input_mapping:
          env: config
          config: config
        params:
          ENV_FILE: foundations/((env))/env/env.yml
          AUTH_CONFIG_FILE: foundations/((env))/env/auth.yml
  
  - name: install-bosh-director
    serial: true
    plan:
      - get: platform-automation-image
        resource: platform-automation
        params:
          globs: ["*image*.tgz"]
          unpack: true
        trigger: true
        passed: ["install-ops-manager"]
      - get: platform-automation-tasks
        resource: platform-automation
        params:
          globs: ["*tasks*.zip"]
          unpack: true
      - get: config
    
      - task: prepare-tasks-with-secrets
        <<: *prepare-task-with-secrets-params
    
      - task: configure-director
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-director.yml
        input_mapping:
          env: config
          vars: config
        params:
          VARS_FILES: |
            vars/foundations/common/global-vars.yml
            vars/foundations/((env))/vars/vars.yml
          ENV_FILE: foundations/((env))/env/env.yml
          DIRECTOR_CONFIG_FILE: config/director.yml
    
      - task: apply-director-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-director-changes.yml
        input_mapping:
          env: config
        params:
          ENV_FILE: foundations/((env))/env/env.yml
  
  - name: tkgi
    serial: true
    plan:
      - get: platform-automation-image
        resource: platform-automation
        params:
          globs: ["*image*.tgz"]
          unpack: true
        trigger: true
        passed: ["upgrade-ops-manager"]
      - get: platform-automation-tasks
        resource: platform-automation
        params:
          globs: ["*tasks*.zip"]
          unpack: true
      - get: config
    
      - task: prepare-tasks-with-secrets
        <<: *prepare-task-with-secrets-params
    
      - task: download-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/download-product.yml
        params:
          CONFIG_FILE: foundations/((env))/versions/download-tkgi.yml
        output_mapping:
          downloaded-product: tkgi-product
          downloaded-stemcell: tkgi-stemcell
    
      - task: upload-and-stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: tkgi-product
          env: config
        params:
          ENV_FILE: foundations/((env))/env/env.yml
    
      - task: upload-tkgi-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          stemcell: tkgi-stemcell
          env: config
        params:
          ENV_FILE: foundations/((env))/env/env.yml
    
      - task: configure-tkgi
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-product.yml
        input_mapping:
          env: config
          vars: config
        params:
          CONFIG_FILE: foundations/((env))/templates/pivotal-container-service.yml
          VARS_FILES: |
            vars/foundations/((env))/defaults/pivotal-container-service.yml
            vars/foundations/((env))/vars/pivotal-container-service.yml
            vars/foundations/((env))/secrets/pivotal-container-service.yml
          ENV_FILE: foundations/((env))/env/env.yml
    
      - task: prepare-tasks-apply-changes-secret
        image: platform-automation-image
        file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
        input_mapping:
          tasks: config
        output_mapping:
          tasks: config
        params:
          CONFIG_PATHS: config/foundations/((env))/env
          TASK_PATH: tasks/tasks/selective-apply-changes
    
      - task: apply-tkgi-changes
        image: platform-automation-image
        file: config/tasks/selective-apply-changes/selective-apply-changes.yml
        input_mapping:
          env: config
        params:
          ENV_FILE: foundations/((env))/env/env.yml
          PRODUCTS: pivotal-container-service
  
  - name: reconfigure-tkgi
    serial: true
    plan:
      - get: platform-automation-image
        resource: platform-automation
        params:
          globs: ["*image*.tgz"]
          unpack: true
        trigger: true
      - get: platform-automation-tasks
        resource: platform-automation
        params:
          globs: ["*tasks*.zip"]
          unpack: true
      - get: config
    
      - task: prepare-tasks-with-secrets
        <<: *prepare-task-with-secrets-params
    
      - task: configure-tkgi
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-product.yml
        input_mapping:
          env: config
          vars: config
        params:
          CONFIG_FILE: foundations/((env))/templates/pivotal-container-service.yml
          VARS_FILES: |
            vars/foundations/((env))/defaults/pivotal-container-service.yml
            vars/foundations/((env))/vars/pivotal-container-service.yml
            vars/foundations/((env))/secrets/pivotal-container-service.yml
          ENV_FILE: foundations/((env))/env/env.yml
    
      - task: prepare-tasks-apply-changes-secret
        image: platform-automation-image
        file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
        input_mapping:
          tasks: config
        output_mapping:
          tasks: config
        params:
          CONFIG_PATHS: config/foundations/((env))/env
          TASK_PATH: tasks/tasks/selective-apply-changes
    
      - task: apply-tkgi-changes
        image: platform-automation-image
        file: config/tasks/selective-apply-changes/selective-apply-changes.yml
        input_mapping:
          env: config
        params:
          ENV_FILE: foundations/((env))/env/env.yml
          PRODUCTS: pivotal-container-service
  
  - name: setting-cluster-admins-ldap-groups-in-uaa
    serial: true
    plan:
      - get: blackrock-tools-image
      - get: config
    
      - task: map-admins-ldap-groups-in-uaa
        image: blackrock-tools-image
        file: config/tasks/map-ldap-group-uaa/map-ldap-group-uaa.yml
        params:
          UAA_TARGET: https://pks-api-((env)).na.blkint.com:8443
          UAA_ADMIN_CLIENT_ID: ((tkgi_uaa_admin_client_id))
          UAA_ADMIN_CLIENT_SECRET: ((tkgi_uaa_admin_client_secret))
          LDAP_GROUPS_FILE: config/foundations/common/ldap-groups.yml
  
    on_failure:
      put: send-an-email
      <<: *email-params
  
  - name: configure-telemetry
    serial: true
    plan:
      - get: platform-automation-image
        resource: platform-automation
        params:
          globs: ["*image*.tgz"]
          unpack: true
        trigger: true
        passed: ["upgrade-ops-manager"]
      - get: platform-automation-tasks
        resource: platform-automation
        params:
          globs: ["*tasks*.zip"]
          unpack: true
      - get: config
    
      - task: prepare-tasks-with-secrets
        <<: *prepare-task-with-secrets-params
    
      - task: download-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/download-product.yml
        params:
          CONFIG_FILE: foundations/((env))/versions/pivotal-telemetry-om.yml
        output_mapping:
          downloaded-product: telemetry-product
          downloaded-stemcell: telemetry-stemcell
    
      - task: upload-and-stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: telemetry-product
          env: config
        params:
          ENV_FILE: foundations/((env))/env/env.yml
    
      - task: upload-telemetry-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          stemcell: telemetry-stemcell
          env: config
        params:
          ENV_FILE: foundations/((env))/env/env.yml
    
      - task: configure-telemetry
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-product.yml
        input_mapping:
          env: config
          vars: config
        params:
          CONFIG_FILE: foundations/((env))/templates/pivotal-telemetry-om.yml
          VARS_FILES: |
            vars/foundations/((env))/defaults/pivotal-telemetry-om.yml
            vars/foundations/((env))/vars/pivotal-telemetry-om.yml
            vars/foundations/((env))/secrets/pivotal-telemetry-om.yml
          ENV_FILE: foundations/((env))/env/env.yml
    
      - task: prepare-tasks-apply-changes-secret
        image: platform-automation-image
        file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
        input_mapping:
          tasks: config
        output_mapping:
          tasks: config
        params:
          CONFIG_PATHS: config/foundations/((env))/env
          TASK_PATH: tasks/tasks/selective-apply-changes
    
      - task: apply-telemetry-changes
        image: platform-automation-image
        file: config/tasks/selective-apply-changes/selective-apply-changes.yml
        input_mapping:
          env: config
        params:
          ENV_FILE: foundations/((env))/env/env.yml
          PRODUCTS: pivotal-telemetry-om
  
  - name: delete-opsman-vm
    plan:
      - in_parallel:
          - get: platform-automation-image
            resource: platform-automation
            params:
              globs: ["*image*.tgz"]
              unpack: true
          - get: platform-automation-tasks
            resource: platform-automation
            params:
              globs: ["*tasks*.zip"]
              unpack: true
          - get: config
          - get: state
      
          - task: prepare-tasks-with-secrets
            <<: *prepare-task-with-secrets-params
      
          - task: delete-vm
            image: platform-automation-image
            file: platform-automation-tasks/tasks/delete-vm.yml
            input_mapping:
              vars: config
            params:
              OPSMAN_CONFIG_FILE: config/opsman.yml
              VARS_FILES: |
                vars/foundations/common/global-vars.yml
                vars/foundations/((env))/vars/vars.yml
              STATE_FILE: ((env))/state.yml
            ensure: *put-state
  
  - name: create-opsman-vm
    plan:
      - in_parallel:
          - get: platform-automation-image
            resource: platform-automation
            params:
              globs: ["*image*.tgz"]
              unpack: true
          - get: platform-automation-tasks
            resource: platform-automation
            params:
              globs: ["*tasks*.zip"]
              unpack: true
          - get: config
            passed:
              - delete-opsman-vm
            trigger: true
          - get: state
      
          - task: prepare-tasks-with-secrets
            <<: *prepare-task-with-secrets-params
      
          - task: download-product
            image: platform-automation-image
            file: platform-automation-tasks/tasks/download-product.yml
            params:
              CONFIG_FILE: foundations/((env))/versions/download-ops-manager.yml
      
          - task: create-vm
            image: platform-automation-image
            file: platform-automation-tasks/tasks/create-vm.yml
            params:
              OPSMAN_CONFIG_FILE: config/opsman.yml
              VARS_FILES: |
                vars/foundations/common/global-vars.yml
                vars/foundations/((env))/vars/vars.yml
            input_mapping:
              vars: config
              image: downloaded-product
            ensure: *put-state
  
  - name: import-om-installation
    plan:
      - in_parallel:
          - get: platform-automation-image
            resource: platform-automation
            params:
              globs: ["*image*.tgz"]
              unpack: true
          - get: platform-automation-tasks
            resource: platform-automation
            params:
              globs: ["*tasks*.zip"]
              unpack: true
          - get: config
            passed:
              - create-opsman-vm
            trigger: true
          - get: om-installation
      
          - task: prepare-tasks-with-secrets
            <<: *prepare-task-with-secrets-params
      
          - task: import-installation
            image: platform-automation-image
            file: platform-automation-tasks/tasks/delete-vm.yml
            input_mapping:
              installation: om-installation
              env: config
            params:
              ENV_FILE: foundations/((env))/env/env.yml
              INSTALLATION_FILE: ((env))/installation.zip